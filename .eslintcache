[{"D:\\Projects\\simplict\\src\\index.js":"1","D:\\Projects\\simplict\\src\\reportWebVitals.js":"2","D:\\Projects\\simplict\\src\\App.js":"3","D:\\Projects\\simplict\\src\\Components\\Timer\\Timer.js":"4","D:\\Projects\\simplict\\src\\Components\\Statistics\\Statistics.js":"5","D:\\Projects\\simplict\\src\\Components\\Scrambler\\Scrambler.js":"6"},{"size":565,"mtime":1611915755638,"results":"7","hashOfConfig":"8"},{"size":375,"mtime":1611915755639,"results":"9","hashOfConfig":"8"},{"size":290,"mtime":1677556576002,"results":"10","hashOfConfig":"8"},{"size":6531,"mtime":1677658963764,"results":"11","hashOfConfig":"8"},{"size":7443,"mtime":1677646361931,"results":"12","hashOfConfig":"8"},{"size":24497,"mtime":1677659525301,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"q1sv2o",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Projects\\simplict\\src\\index.js",[],["28","29"],"D:\\Projects\\simplict\\src\\reportWebVitals.js",[],"D:\\Projects\\simplict\\src\\App.js",[],"D:\\Projects\\simplict\\src\\Components\\Timer\\Timer.js",[],"D:\\Projects\\simplict\\src\\Components\\Statistics\\Statistics.js",["30"],"import React from 'react';\r\nimport { Button, Row, Col } from 'react-bootstrap';\r\nimport { Line } from 'react-chartjs-2';\r\nimport refresh from '../../Assets/Refresh_icon.png';\r\nimport \"./Statistics.css\";\r\n\r\nclass Stats extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      record: [],\r\n      ao5: 0,\r\n      ao12: 0,\r\n      best: 0,\r\n      worst: 0,\r\n      session_average: 0,\r\n      session_mean: 0,\r\n      full_record: [],\r\n      x_axis: [],\r\n    };\r\n\r\n    this.avg_of_5 = this.avg_of_5.bind(this)\r\n    this.avg_of_12 = this.avg_of_12.bind(this)\r\n    this.stringToInt = this.stringToInt.bind(this)\r\n    this.clearRecord = this.clearRecord.bind(this)\r\n    this.getBest = this.getBest.bind(this)\r\n    this.getWorst = this.getWorst.bind(this)\r\n    this.getSessionAvg = this.getSessionAvg.bind(this)\r\n    this.deleteLastSolve = this.deleteLastSolve.bind(this)\r\n    this.generateX = this.generateX.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"spacebar\", this.handleSpace, true);\r\n    window.addEventListener(\"resize\", this.handleWindowSizeChange);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if(prevProps.record.length !== this.props.record.length){\r\n      this.setState({\r\n        ao5: this.avg_of_5(),\r\n        ao12: this.avg_of_12(),\r\n        best: this.getBest(),\r\n        worst: this.getWorst(),\r\n        session_average: this.getSessionAvg(),\r\n        session_mean: this.getSessionMean(),\r\n        x_axis: this.generateX(),\r\n      })\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"spacebar\", this.handleSpace, true);\r\n  }\r\n\r\n\r\n  stringToInt(array) {\r\n    return array.map(Number);\r\n  }\r\n\r\n  generateX() {\r\n    var labels = []\r\n    for (var i = 1; i <= this.props.record.length; i++) {\r\n      labels = labels.concat(i);\r\n    }\r\n\r\n    return labels;\r\n  }\r\n\r\n  getBest() {\r\n    var session = [];\r\n    session = session.concat(this.props.record);\r\n    session.sort(function (a, b) { return a - b });\r\n\r\n    return session.shift();\r\n  }\r\n\r\n  getWorst() {\r\n    var session = [];\r\n    session = session.concat(this.props.record);\r\n    session.sort(function (a, b) { return a - b });\r\n\r\n    return session.pop();\r\n  }\r\n\r\n  avg_of_5() {\r\n    if (this.props.record.length >= 5) {\r\n      var i = this.props.record.length - 1;\r\n      var solves = []\r\n      for (var x = i; (i - x) < 5; x--) {\r\n        solves = solves.concat(this.props.record[x])\r\n      }\r\n\r\n      this.setState({record: solves});\r\n      solves.sort(function (a, b) { return a - b });\r\n      solves.shift();\r\n      solves.pop();\r\n\r\n      return ((this.stringToInt(solves).reduce((a, b) => a + b, 0)) / 3).toFixed(2);\r\n\r\n    }\r\n  }\r\n\r\n  avg_of_12() {\r\n    if (this.props.record.length >= 12) {\r\n      var i = this.props.record.length - 1;\r\n      var solves = []\r\n      for (var x = i; (i - x) < 12; x--) {\r\n        solves = solves.concat(this.props.record[x])\r\n      }\r\n\r\n      this.setState({record: solves});\r\n      solves.sort(function (a, b) { return a - b });\r\n      solves.shift();\r\n      solves.pop();\r\n\r\n      return ((this.stringToInt(solves).reduce((a, b) => a + b, 0)) / 10).toFixed(2)\r\n    }\r\n  }\r\n\r\n \r\n\r\n  getSessionAvg() {\r\n    var session = []\r\n    if (this.props.record.length >= 3) {\r\n      session = session = session.concat(this.props.record);\r\n      session.sort(function (a, b) { return a - b });\r\n\r\n      session.shift();\r\n      session.pop();\r\n\r\n    }\r\n\r\n    return ((this.stringToInt(session).reduce((a, b) => a + b, 0)) / (this.props.record.length - 2)).toFixed(2);\r\n  }\r\n\r\n  getSessionMean() {\r\n    var session = []\r\n    if (this.props.record.length > 0) {\r\n      session = session = session.concat(this.props.record);\r\n      session.sort(function (a, b) { return a - b });\r\n    }\r\n\r\n    return ((this.stringToInt(session).reduce((a, b) => a + b, 0)) / this.props.record.length).toFixed(2);\r\n  }\r\n\r\n  clearRecord() {\r\n    this.props.clearRecord();\r\n    this.setState({\r\n      ao5: \"\",\r\n      ao12: \"\",\r\n      ao50: \"\",\r\n      best: \"\",\r\n      worst: \"\",\r\n      record: \"\",\r\n    })\r\n  }\r\n\r\n  deleteLastSolve() {\r\n    console.log(\"Delete last solve called\");\r\n    this.props.record.pop();\r\n    this.setState({ record: this.props.record})\r\n  }\r\n\r\n  toggleDashboard() {\r\n    var x = document.getElementById(\"dashboard\");\r\n    if (x.style.display === \"none\") {\r\n      x.style.display = \"flex\";\r\n    } else {\r\n      x.style.display = \"none\";\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const chartOptions={\r\n      // maintainAspectRatio: true,\r\n      responsive: true,\r\n      height: \"10rem\",\r\n      scales: {\r\n        yAxes: [{\r\n          ticks: {\r\n            beginAtZero: true\r\n          }\r\n        }]\r\n      }\r\n    }\r\n\r\n    const chartData = {\r\n      labels: this.state.x_axis,\r\n      datasets: [\r\n        {\r\n          label: 'Solve Times',\r\n          fill: false,\r\n          lineTension: 0.5,\r\n          backgroundColor: '#FFFFFF',\r\n          borderColor: '#483d8b',\r\n          borderWidth: 1,\r\n          data: this.props.record\r\n        }\r\n      ]\r\n    }\r\n      return (\r\n        <div id=\"stats\">\r\n          <div id=\"avg-container\">\r\n            <p id=\"avg-text\"> Average of 5: {this.state.ao5} </p>\r\n            <p id=\"avg-text\"> Average of 12: {this.state.ao12}</p>\r\n          </div>\r\n          <Button variant=\"outline-dark\" id=\"toggle-button\" onClick={this.toggleDashboard}>Dashboard</Button>\r\n          <Row id=\"dashboard\">\r\n            <Col lg={2} md={12} xs={12} id=\"stats_section\">\r\n              <Row>\r\n                <Col lg={12} md={12} xs={12}>\r\n                  <p id=\"dashboard_header\">Session Summary</p>\r\n                  <div id=\"main_stats\">\r\n                    <div> <strong>Session Best:</strong> {this.state.best} </div>\r\n                    <div> <strong>Session Worst:</strong> {this.state.worst} </div>\r\n                    <div> <strong>Session Average:</strong>  {this.state.session_average}</div>\r\n                    <div> <strong>Session Mean</strong> {this.state.session_mean} </div>\r\n                  </div>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n            <Col lg={5} md={12} xs={12} id=\"data_section\">\r\n              <Row>\r\n                <Col lg={4} md={12} xs={12}>\r\n                  <p id=\"dashboard_header\">Session Data</p>\r\n                  <p id=\"main_stats\">All individual times recorded for this session.</p>\r\n                  <Button variant=\"outline-dark\" id=\"reset-button\" onClick={this.deleteLastSolve}> Delete Last </Button>\r\n                  <Button variant=\"outline-dark\" id=\"reset-button\" onClick={this.clearRecord}>Reset</Button>\r\n                </Col>\r\n                <Col lg={8} md={12} xs={12} id=\"recorded_times\">\r\n                  {this.props.record}\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n            <Col lg={5} md={12} xs={12} id=\"chart_section\">\r\n              <Row>\r\n                <Col lg={4} md={12} xs={12}>\r\n                <p id=\"dashboard_header\">Session Chart</p>\r\n                <p id=\"main_stats\">Recorded times plotted on a chart for easier visualization.</p>\r\n                </Col>\r\n                <Col lg={8} md={12} xs={12}>\r\n                  <Line data={chartData}\r\n                  width={5}\r\n                  height={2}\r\n                  options={chartOptions}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default Stats;","D:\\Projects\\simplict\\src\\Components\\Scrambler\\Scrambler.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":4,"column":8,"nodeType":"37","messageId":"38","endLine":4,"endColumn":15},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'refresh' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]